name: Github actions to deploy GKE Cluster

on:
  workflow_dispatch:
      inputs:
        action:
          type: choice
          description: 'Select an action to perform'
          options:
            - apply
            - destroy
          required: true
          default: apply
  push:
    branches:
      - main
jobs:
  build:
    name: GKE Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout to Repo
      uses: 'actions/checkout@v4'

    - id: 'auth'
      name: "Authenticate to GCP"
      uses: 'google-github-actions/auth@v0.3.1'
      with:
        create_credentials_file: 'true'
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        project_id: ${{ secrets.PROJECT_ID }}

    - name: 'Check helm'
      run: 'helm version'

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: false

    - name: Terraform Apply
      id: apply
      if: ${{ github.event.inputs.action == 'apply'}}
      run: terraform apply -auto-approve

    - name: Get Cluster credentials
      id: K8s
      if: ${{ github.event.inputs.action == 'apply'}}
      uses: 'google-github-actions/get-gke-credentials@v2'
      with:
        cluster_name: 'primary'
        location: 'us-central1-a'

    - name: Run Commands
      id: Kubectl
      if: ${{ github.event.inputs.action == 'apply'}}
      run: |
        'kubectl get all'

    - name: Terraform destroy
      id: destroy
      if: ${{ github.event.inputs.action == 'destroy'}}
      run: terraform destroy -auto-approve